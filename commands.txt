### Meta mask

#enter pipe veteran stage exile abstract crisp emerge slender immune theme section

# Faucet
# https://faucet.rinkeby.io/

# Mnemonic
# https://iancoleman.io/ #bip39/


### Eth Wallet Demo

# ClenUp
CMD/CTRL + ALT + i
#CustomContracts.find().fetch()
CustomContracts.remove('the_id_you_copied')


#### Understanding Go-Ethereum (geth)

brew update  
brew upgrade
brew tap ethereum/ethereum
brew install solidity


mkdir geth-demo; cd geth-demo
nano init.json
ls
geth --datadir ./datadir_node_0 init genesis.json
ls # Check datadir in finder

geth account list 
# Create new account with password file
geth account new --password password
geth account list 

# Editing passphrase
geth account update f9fea4d32eaf6213d061fbef9eeed8bfdea7382d

# Console

geth --datadir ./datadir_node_0 console

web3
eth
net
admin
personal
miner

eth.getBlock(0)

eth.accounts
personal.newAccount('123')
eth.accounts
eth.getBalance(eth.accounts[0])
eth.blockNumber

miner.start(1)
miner.stop

eth.blockNumber
eth.getBalance(eth.accounts[0])

# create new account
personal.newAccount('123')
eth.accounts

# Transfer ethers
eth.sendTransaction({from:eth.accounts[0], to:eth.accounts[1], value: web3.toWei(1, "ether")})


# Unlock account
personal.unlockAccount(eth.accounts[0], '123')
eth.sendTransaction({from:eth.accounts[0], to:eth.accounts[1], value: web3.toWei(1, "ether")})

# Check Balance
eth.getBalance(eth.accounts[0])
eth.getBalance(eth.accounts[1])

# start mining
miner.start(1)
#miner.stop()

# Check Balance
eth.getBalance(eth.accounts[0])
eth.getBalance(eth.accounts[1])

# Check transaction
eth.getTransaction("0x9b0a058c4e7708980b86bc0a1ee953dc504897aae7c961aa977536f5bab89483")

# Get block
eth.getBlock("0x40cfad15525546dc818e861349aae1db6c1403d9adebaa46ed580249f61fa6bb")





######### Adding Peers and transfering ether between nodes

geth --datadir ./datadir_node_0 --networkid 9999 console 
admin.nodeInfo

# In new terminal 
geth --datadir ./datadir_node_1 init genesis.json

geth --datadir ./datadir_node_1 --networkid 9999 --port 30308 --nodiscover console
admin.nodeInfo


# In first terminal
admin.addPeer("enode://021b5869de2cfa50c6170801ca0bfeb8025e930eda54bea7fd90fa873b9c65c3904229ef839d779942ba15533ca4b894b1435d2779e371b3410f9f89dc5393da@[::]:30308?discport=0")
[::]:30308
#  In both terminal 
admin.peers

# Create account in second node
personal.newAccount('123')
eth.getBalance(eth.accounts[0])

#  In first terminal unlock account and then transfer money
personal.unlockAccount(eth.accounts[0], "123")
eth.sendTransaction({from:eth.accounts[0], to:"0x46bac9200169698eb9d4e06e86df6eda00b59b60", value: web3.toWei(1, "ether")})

# In second terminal
eth.getBalance(eth.accounts[0])

#miner.stop()

###### Understanding Solidity Compiler 

sudo npm install solc -g
solc
solc greetings.sol #  compiling solc files 

#  Get abi, bin and metadata in json format
solc --combined-json=abi,bin,metadata --output-dir . greetings.sol






This package has installed:
	•	Node.js v10.15.1 to /usr/local/bin/node
	•	npm v6.4.1 to /usr/local/bin/npm
Make sure that /usr/local/bin is in your $PATH.




--------- Working with WEB3 ------------

sudo npm install solc -g
solc greetings.sol #  compiling solc files 

#  Get abi, bin and metadata in json format
solc --combined-json=abi,bin,metadata --output-dir . greetings.sol

Mocha
sudo npm install mocha -g
Tests solidity codes (in ganache local network)

Ganache
sudo npm install ganache-cli -g

mkdir web3  ;cd web3

node -v #  v10.15.1
npm -v #  6.4.1
npm init #  it adds package.json file

# Save all dependencies in package.json
npm install --save solc mocha ganache-cli web3

#  for compiling
#  after arranging code in proper structure
node compile.js #  using solc programmatically  

# for testing
Edit package.json file and write “mocha” in test (package.json was created after running => npm init)
npm test 

#  for deployment
node deployment.js

#  Show transaction in etherscan 
#  Interact with contract from different account in remix

#  saving ABI for interaction with deployed contract through code
solc contracts/greetings.sol --abi -o .

# run interaction code
node interaction.js

#  Take the voter code
node deploy.js
node interact.js


# Deployment in rinkeby
#  Light weighted node
geth --rinkeby --rpc --rpcapi="eth,net,web3,personal,txpool" --syncmode=light

geth attach http://127.0.0.1:8545


personal.listAccounts
personal.newAccount('123')  # 123 is password of that account

account = personal.listAccounts[0]
eth.getBalance(personal.listAccounts[0])
# transfer ether
eth.getBalance(account)

personal.unlockAccount(personal.listAccounts[0], '123')










